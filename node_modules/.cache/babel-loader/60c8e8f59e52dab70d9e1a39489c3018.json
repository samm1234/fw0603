{"ast":null,"code":"import _objectSpread from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/seungmin/face-web/src/utils/components.js\";\n\n/* eslint-disable no-console */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { pick, some } from 'lodash';\nimport { isLoaded } from 'react-redux-firebase';\nimport LoadableComponent from 'react-loadable';\nimport { mapProps, branch, renderComponent } from 'recompose';\nimport LoadingSpinner from 'components/LoadingSpinner';\n/**\n * Show a loading spinner when a condition is truthy. Used within\n * spinnerWhileLoading. Accepts a test function and a higher-order component.\n * @param  {Function} condition - Condition function for when to show spinner\n * @return {HigherOrderComponent}\n */\n\nexport var spinnerWhile = function spinnerWhile(condition) {\n  return branch(condition, renderComponent(LoadingSpinner));\n};\n/**\n * Show a loading spinner while props are loading . Checks\n * for undefined, null, or a value (as well as handling `auth.isLoaded` and\n * `profile.isLoaded`). **NOTE:** Meant to be used with props which are passed\n * as props from state.firebase using connect (from react-redux), which means\n * it could have unexpected results for other props\n * @example Spinner While Data Loading\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect } from 'react-redux-firebase'\n *\n * const enhance = compose(\n *   firebaseConnect(['projects']),\n *   connect(({ firebase: { data: { projects } } })),\n *   spinnerWhileLoading(['projects'])\n * )\n *\n * export default enhance(SomeComponent)\n * @param  {Array} propNames - List of prop names to check loading for\n * @return {HigherOrderComponent}\n */\n\nexport var spinnerWhileLoading = function spinnerWhileLoading(propNames) {\n  return spinnerWhile(function (props) {\n    return some(propNames, function (name) {\n      return !isLoaded(props[name]);\n    });\n  });\n};\n/**\n * HOC that logs props using console.log. Accepts an array list of prop names\n * to log, if none provided all props are logged. **NOTE:** Only props at\n * available to the HOC will be logged.\n * @example Log Single Prop\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect } from 'react-redux-firebase'\n *\n * const enhance = compose(\n *   withProps(() => ({ projectName: 'test' })),\n *   logProps(['projectName']) // 'test' would be logged to console when SomeComponent is rendered\n * )\n *\n * export default enhance(SomeComponent)\n * @param  {Array} propNames - List of prop names to log. If none provided, all\n * are logged\n * @return {HigherOrderComponent}\n */\n\nexport var logProps = function logProps(propNames) {\n  var logName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return mapProps(function (ownerProps) {\n    console.log(\"\".concat(logName, \" props:\"), propNames ? pick(ownerProps, propNames) : ownerProps);\n    return ownerProps;\n  });\n};\nexport function createWithFromContext(withVar) {\n  return function (WrappedComponent) {\n    var WithFromContext =\n    /*#__PURE__*/\n    function (_Component) {\n      _inherits(WithFromContext, _Component);\n\n      function WithFromContext() {\n        _classCallCheck(this, WithFromContext);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(WithFromContext).apply(this, arguments));\n      }\n\n      _createClass(WithFromContext, [{\n        key: \"render\",\n        value: function render() {\n          var props = _defineProperty({}, withVar, this.context[withVar]);\n\n          if (this.context.store && this.context.store.dispatch) {\n            props.dispatch = this.context.store.dispatch;\n          }\n\n          return React.createElement(WrappedComponent, Object.assign({}, this.props, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }));\n        }\n      }]);\n\n      return WithFromContext;\n    }(Component);\n\n    WithFromContext.contextTypes = _defineProperty({}, withVar, PropTypes.object.isRequired);\n    return WithFromContext;\n  };\n}\n/**\n * HOC that adds store to props\n * @return {HigherOrderComponent}\n */\n\nexport var withStore = createWithFromContext('store');\n/**\n * Create component which is loaded async, showing a loading spinner\n * in the meantime.\n * @param {Object} opts - Loading options\n * @param {Function} opts.loader - Loader function (should return import promise)\n */\n\nexport function Loadable(opts) {\n  return LoadableComponent(_objectSpread({\n    loading: LoadingSpinner\n  }, opts));\n}","map":{"version":3,"sources":["/home/seungmin/face-web/src/utils/components.js"],"names":["React","Component","PropTypes","pick","some","isLoaded","LoadableComponent","mapProps","branch","renderComponent","LoadingSpinner","spinnerWhile","condition","spinnerWhileLoading","propNames","props","name","logProps","logName","ownerProps","console","log","createWithFromContext","withVar","WrappedComponent","WithFromContext","context","store","dispatch","contextTypes","object","isRequired","withStore","Loadable","opts","loading"],"mappings":";;;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,QAA3B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,OAAOC,iBAAP,MAA8B,gBAA9B;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,eAA3B,QAAkD,WAAlD;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AAEA;;;;;;;AAMA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,SAAS;AAAA,SACnCJ,MAAM,CAACI,SAAD,EAAYH,eAAe,CAACC,cAAD,CAA3B,CAD6B;AAAA,CAA9B;AAGP;;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,SAAS;AAAA,SAC1CH,YAAY,CAAC,UAAAI,KAAK;AAAA,WAAIX,IAAI,CAACU,SAAD,EAAY,UAAAE,IAAI;AAAA,aAAI,CAACX,QAAQ,CAACU,KAAK,CAACC,IAAD,CAAN,CAAb;AAAA,KAAhB,CAAR;AAAA,GAAN,CAD8B;AAAA,CAArC;AAGP;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACH,SAAD;AAAA,MAAYI,OAAZ,uEAAsB,EAAtB;AAAA,SACtBX,QAAQ,CAAC,UAAAY,UAAU,EAAI;AACrBC,IAAAA,OAAO,CAACC,GAAR,WACKH,OADL,cAEEJ,SAAS,GAAGX,IAAI,CAACgB,UAAD,EAAaL,SAAb,CAAP,GAAiCK,UAF5C;AAIA,WAAOA,UAAP;AACD,GANO,CADc;AAAA,CAAjB;AASP,OAAO,SAASG,qBAAT,CAA+BC,OAA/B,EAAwC;AAC7C,SAAO,UAAAC,gBAAgB,EAAI;AAAA,QACnBC,eADmB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,iCAEd;AACP,cAAMV,KAAK,uBAAMQ,OAAN,EAAgB,KAAKG,OAAL,CAAaH,OAAb,CAAhB,CAAX;;AACA,cAAI,KAAKG,OAAL,CAAaC,KAAb,IAAsB,KAAKD,OAAL,CAAaC,KAAb,CAAmBC,QAA7C,EAAuD;AACrDb,YAAAA,KAAK,CAACa,QAAN,GAAiB,KAAKF,OAAL,CAAaC,KAAb,CAAmBC,QAApC;AACD;;AACD,iBAAO,oBAAC,gBAAD,oBAAsB,KAAKb,KAA3B,EAAsCA,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;AARsB;;AAAA;AAAA,MACKd,SADL;;AAWzBwB,IAAAA,eAAe,CAACI,YAAhB,uBACGN,OADH,EACarB,SAAS,CAAC4B,MAAV,CAAiBC,UAD9B;AAIA,WAAON,eAAP;AACD,GAhBD;AAiBD;AAED;;;;;AAIA,OAAO,IAAMO,SAAS,GAAGV,qBAAqB,CAAC,OAAD,CAAvC;AAEP;;;;;;;AAMA,OAAO,SAASW,QAAT,CAAkBC,IAAlB,EAAwB;AAC7B,SAAO5B,iBAAiB;AACtB6B,IAAAA,OAAO,EAAEzB;AADa,KAEnBwB,IAFmB,EAAxB;AAID","sourcesContent":["/* eslint-disable no-console */\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { pick, some } from 'lodash'\nimport { isLoaded } from 'react-redux-firebase'\nimport LoadableComponent from 'react-loadable'\nimport { mapProps, branch, renderComponent } from 'recompose'\nimport LoadingSpinner from 'components/LoadingSpinner'\n\n/**\n * Show a loading spinner when a condition is truthy. Used within\n * spinnerWhileLoading. Accepts a test function and a higher-order component.\n * @param  {Function} condition - Condition function for when to show spinner\n * @return {HigherOrderComponent}\n */\nexport const spinnerWhile = condition =>\n  branch(condition, renderComponent(LoadingSpinner))\n\n/**\n * Show a loading spinner while props are loading . Checks\n * for undefined, null, or a value (as well as handling `auth.isLoaded` and\n * `profile.isLoaded`). **NOTE:** Meant to be used with props which are passed\n * as props from state.firebase using connect (from react-redux), which means\n * it could have unexpected results for other props\n * @example Spinner While Data Loading\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect } from 'react-redux-firebase'\n *\n * const enhance = compose(\n *   firebaseConnect(['projects']),\n *   connect(({ firebase: { data: { projects } } })),\n *   spinnerWhileLoading(['projects'])\n * )\n *\n * export default enhance(SomeComponent)\n * @param  {Array} propNames - List of prop names to check loading for\n * @return {HigherOrderComponent}\n */\nexport const spinnerWhileLoading = propNames =>\n  spinnerWhile(props => some(propNames, name => !isLoaded(props[name])))\n\n/**\n * HOC that logs props using console.log. Accepts an array list of prop names\n * to log, if none provided all props are logged. **NOTE:** Only props at\n * available to the HOC will be logged.\n * @example Log Single Prop\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseConnect } from 'react-redux-firebase'\n *\n * const enhance = compose(\n *   withProps(() => ({ projectName: 'test' })),\n *   logProps(['projectName']) // 'test' would be logged to console when SomeComponent is rendered\n * )\n *\n * export default enhance(SomeComponent)\n * @param  {Array} propNames - List of prop names to log. If none provided, all\n * are logged\n * @return {HigherOrderComponent}\n */\nexport const logProps = (propNames, logName = '') =>\n  mapProps(ownerProps => {\n    console.log(\n      `${logName} props:`,\n      propNames ? pick(ownerProps, propNames) : ownerProps\n    )\n    return ownerProps\n  })\n\nexport function createWithFromContext(withVar) {\n  return WrappedComponent => {\n    class WithFromContext extends Component {\n      render() {\n        const props = { [withVar]: this.context[withVar] }\n        if (this.context.store && this.context.store.dispatch) {\n          props.dispatch = this.context.store.dispatch\n        }\n        return <WrappedComponent {...this.props} {...props} />\n      }\n    }\n\n    WithFromContext.contextTypes = {\n      [withVar]: PropTypes.object.isRequired\n    }\n\n    return WithFromContext\n  }\n}\n\n/**\n * HOC that adds store to props\n * @return {HigherOrderComponent}\n */\nexport const withStore = createWithFromContext('store')\n\n/**\n * Create component which is loaded async, showing a loading spinner\n * in the meantime.\n * @param {Object} opts - Loading options\n * @param {Function} opts.loader - Loader function (should return import promise)\n */\nexport function Loadable(opts) {\n  return LoadableComponent({\n    loading: LoadingSpinner,\n    ...opts\n  })\n}\n"]},"metadata":{},"sourceType":"module"}