{"ast":null,"code":"import _objectSpread from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withHandlers, withStateHandlers } from 'recompose';\nimport { withRouter } from 'react-router-dom';\nimport { firebaseConnect } from 'react-redux-firebase';\nimport { withNotifications } from 'modules/notification';\nimport { spinnerWhileLoading } from 'utils/components';\nimport { UserIsAuthenticated } from 'utils/router';\nimport { success, error } from 'components/Messages';\nimport { LIST_PATH } from 'constants/paths';\nexport default compose( // redirect to /login if user is not logged in\nUserIsAuthenticated, // Map auth uid from state to props\nconnect(function (_ref) {\n  var uid = _ref.firebase.auth.uid;\n  return {\n    uid: uid\n  };\n}), // Wait for uid to exist before going further\nspinnerWhileLoading(['uid']), // Create listeners based on current users UID\nfirebaseConnect(function (_ref2) {\n  var params = _ref2.params,\n      uid = _ref2.uid;\n  return [{\n    path: 'posts',\n    queryParams: ['orderByChild=createdBy', \"equalTo=\".concat(uid)]\n  }];\n}), // Add props.router\nwithRouter, // Add handlers as props\nwithHandlers({\n  addPost: function addPost(props) {\n    return function (newInstance) {\n      var firebase = props.firebase,\n          uid = props.uid;\n\n      if (!uid) {\n        return error('로그인이 필요한 작업입니다.');\n      }\n\n      return firebase.push('posts', _objectSpread({}, newInstance, {\n        createdBy: uid,\n        createdAt: firebase.database.ServerValue.TIMESTAMP\n      })).then(function () {\n        success('작성을 성공적으로 마무리했습니다.');\n      }).catch(function (err) {\n        console.error('Error:', err); // eslint-disable-line no-console\n\n        error(err.message || '실패.');\n        return Promise.reject(err);\n      });\n    };\n  }\n}));","map":{"version":3,"sources":["/home/seungmin/face-web/src/routes/User/Post/components/PostPage/PostPage.enhancer.js"],"names":["compose","connect","withHandlers","withStateHandlers","withRouter","firebaseConnect","withNotifications","spinnerWhileLoading","UserIsAuthenticated","success","error","LIST_PATH","uid","firebase","auth","params","path","queryParams","addPost","props","newInstance","push","createdBy","createdAt","database","ServerValue","TIMESTAMP","then","catch","err","console","message","Promise","reject"],"mappings":";AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,EAAuBC,iBAAvB,QAAgD,WAAhD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,mBAAT,QAAoC,kBAApC;AACA,SAASC,mBAAT,QAAoC,cAApC;AAEA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,qBAA/B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,eAAeX,OAAO,EACpB;AACAQ,mBAFoB,EAGpB;AACAP,OAAO,CAAC;AAAA,MAAuBW,GAAvB,QAAGC,QAAH,CAAeC,IAAf,CAAuBF,GAAvB;AAAA,SAAsC;AAAEA,IAAAA,GAAG,EAAHA;AAAF,GAAtC;AAAA,CAAD,CAJa,EAKpB;AACAL,mBAAmB,CAAC,CAAC,KAAD,CAAD,CANC,EAOpB;AACAF,eAAe,CAAC;AAAA,MAAGU,MAAH,SAAGA,MAAH;AAAA,MAAWH,GAAX,SAAWA,GAAX;AAAA,SAAqB,CACnC;AACEI,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,WAAW,EAAE,CAAC,wBAAD,oBAAsCL,GAAtC;AAFf,GADmC,CAArB;AAAA,CAAD,CARK,EAcpB;AACAR,UAfoB,EAgBpB;AACAF,YAAY,CAAC;AACXgB,EAAAA,OAAO,EAAE,iBAAAC,KAAK;AAAA,WAAI,UAAAC,WAAW,EAAI;AAAA,UACvBP,QADuB,GACLM,KADK,CACvBN,QADuB;AAAA,UACbD,GADa,GACLO,KADK,CACbP,GADa;;AAE/B,UAAI,CAACA,GAAL,EAAU;AACR,eAAOF,KAAK,CAAC,iBAAD,CAAZ;AACD;;AACD,aAAOG,QAAQ,CACZQ,IADI,CACC,OADD,oBAEAD,WAFA;AAGHE,QAAAA,SAAS,EAAEV,GAHR;AAIHW,QAAAA,SAAS,EAAEV,QAAQ,CAACW,QAAT,CAAkBC,WAAlB,CAA8BC;AAJtC,UAMJC,IANI,CAMC,YAAM;AACVlB,QAAAA,OAAO,CAAC,oBAAD,CAAP;AACD,OARI,EASJmB,KATI,CASE,UAAAC,GAAG,EAAI;AACZC,QAAAA,OAAO,CAACpB,KAAR,CAAc,QAAd,EAAwBmB,GAAxB,EADY,CACkB;;AAC9BnB,QAAAA,KAAK,CAACmB,GAAG,CAACE,OAAJ,IAAe,KAAhB,CAAL;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeJ,GAAf,CAAP;AACD,OAbI,CAAP;AAcD,KAnBa;AAAA;AADH,CAAD,CAjBQ,CAAtB","sourcesContent":["import { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport { withHandlers, withStateHandlers } from 'recompose'\nimport { withRouter } from 'react-router-dom'\nimport { firebaseConnect } from 'react-redux-firebase'\nimport { withNotifications } from 'modules/notification'\nimport { spinnerWhileLoading } from 'utils/components'\nimport { UserIsAuthenticated } from 'utils/router'\n\nimport { success, error } from 'components/Messages';\nimport { LIST_PATH } from 'constants/paths'\n\nexport default compose(\n  // redirect to /login if user is not logged in\n  UserIsAuthenticated,\n  // Map auth uid from state to props\n  connect(({ firebase: { auth: { uid } } }) => ({ uid })),\n  // Wait for uid to exist before going further\n  spinnerWhileLoading(['uid']),\n  // Create listeners based on current users UID\n  firebaseConnect(({ params, uid }) => [\n    {\n      path: 'posts',\n      queryParams: ['orderByChild=createdBy', `equalTo=${uid}`]\n    }\n  ]),\n  // Add props.router\n  withRouter,\n  // Add handlers as props\n  withHandlers({\n    addPost: props => newInstance => {\n      const { firebase, uid } = props\n      if (!uid) {\n        return error('로그인이 필요한 작업입니다.');\n      }\n      return firebase\n        .push('posts', {\n          ...newInstance,\n          createdBy: uid,\n          createdAt: firebase.database.ServerValue.TIMESTAMP\n        })\n        .then(() => {\n          success('작성을 성공적으로 마무리했습니다.');\n        })\n        .catch(err => {\n          console.error('Error:', err); // eslint-disable-line no-console\n          error(err.message || '실패.');\n          return Promise.reject(err);\n        })\n    },\n  }),\n)\n"]},"metadata":{},"sourceType":"module"}