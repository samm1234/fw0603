{"ast":null,"code":"import { connectedRouterRedirect } from 'redux-auth-wrapper/history4/redirect';\nimport locationHelperBuilder from 'redux-auth-wrapper/history4/locationHelper';\nimport createHistory from 'history/createBrowserHistory';\nimport LoadingSpinner from 'components/LoadingSpinner';\nimport { LIST_PATH, POST_PATH } from 'constants/paths';\nvar locationHelper = locationHelperBuilder({});\nvar history = createHistory();\nvar AUTHED_REDIRECT = 'AUTHED_REDIRECT';\nvar UNAUTHED_REDIRECT = 'UNAUTHED_REDIRECT';\n/**\n * Higher Order Component that redirects to `/login` instead\n * rendering if user is not authenticated (default of redux-auth-wrapper).\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\n\nexport var UserIsAuthenticated = connectedRouterRedirect({\n  redirectPath: '/login',\n  AuthenticatingComponent: LoadingSpinner,\n  wrapperDisplayName: 'UserIsAuthenticated',\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: function authenticatedSelector(_ref) {\n    var auth = _ref.firebase.auth;\n    return !auth.isEmpty && !!auth.uid;\n  },\n  authenticatingSelector: function authenticatingSelector(_ref2) {\n    var _ref2$firebase = _ref2.firebase,\n        auth = _ref2$firebase.auth,\n        isInitializing = _ref2$firebase.isInitializing;\n    return !auth.isLoaded || isInitializing;\n  },\n  redirectAction: function redirectAction(newLoc) {\n    return function (dispatch) {\n      // Use push, replace, and go to navigate around.\n      history.push(newLoc);\n      dispatch({\n        type: UNAUTHED_REDIRECT,\n        payload: {\n          message: 'User is not authenticated.'\n        }\n      });\n    };\n  }\n});\n/**\n * Higher Order Component that redirects to listings page or most\n * recent route instead rendering if user is not authenticated. This is useful\n * routes that should not be displayed if a user is logged in, such as the\n * login route.\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\n\nexport var UserIsNotAuthenticated = connectedRouterRedirect({\n  AuthenticatingComponent: LoadingSpinner,\n  wrapperDisplayName: 'UserIsNotAuthenticated',\n  allowRedirectBack: false,\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: function authenticatedSelector(_ref3) {\n    var auth = _ref3.firebase.auth;\n    return auth.isEmpty;\n  },\n  authenticatingSelector: function authenticatingSelector(_ref4) {\n    var _ref4$firebase = _ref4.firebase,\n        auth = _ref4$firebase.auth,\n        isInitializing = _ref4$firebase.isInitializing;\n    return !auth.isLoaded || isInitializing;\n  },\n  redirectPath: function redirectPath(state, ownProps) {\n    console.log('state');\n    console.log(state);\n    console.log('ownProps');\n    console.log(ownProps);\n    var email = state.firebase.auth.email;\n\n    if (email === 'admin@test.com') {\n      console.log('isAdmin');\n      return POST_PATH;\n    }\n\n    return locationHelper.getRedirectQueryParam(ownProps) || LIST_PATH;\n  },\n  redirectAction: function redirectAction(newLoc) {\n    return function (dispatch) {\n      // Use push, replace, and go to navigate around.\n      history.push(newLoc);\n      dispatch({\n        type: AUTHED_REDIRECT,\n        payload: {\n          message: 'User is not authenticated.'\n        }\n      });\n    };\n  }\n});","map":{"version":3,"sources":["/home/seungmin/face-web/src/utils/router.js"],"names":["connectedRouterRedirect","locationHelperBuilder","createHistory","LoadingSpinner","LIST_PATH","POST_PATH","locationHelper","history","AUTHED_REDIRECT","UNAUTHED_REDIRECT","UserIsAuthenticated","redirectPath","AuthenticatingComponent","wrapperDisplayName","authenticatedSelector","auth","firebase","isEmpty","uid","authenticatingSelector","isInitializing","isLoaded","redirectAction","newLoc","dispatch","push","type","payload","message","UserIsNotAuthenticated","allowRedirectBack","state","ownProps","console","log","email","getRedirectQueryParam"],"mappings":"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","sourcesContent":["import { connectedRouterRedirect } from 'redux-auth-wrapper/history4/redirect'\nimport locationHelperBuilder from 'redux-auth-wrapper/history4/locationHelper'\nimport createHistory from 'history/createBrowserHistory'\nimport LoadingSpinner from 'components/LoadingSpinner'\nimport { LIST_PATH, POST_PATH } from 'constants/paths'\n\nconst locationHelper = locationHelperBuilder({})\nconst history = createHistory()\n\nconst AUTHED_REDIRECT = 'AUTHED_REDIRECT'\nconst UNAUTHED_REDIRECT = 'UNAUTHED_REDIRECT'\n\n/**\n * Higher Order Component that redirects to `/login` instead\n * rendering if user is not authenticated (default of redux-auth-wrapper).\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\nexport const UserIsAuthenticated = connectedRouterRedirect({\n  redirectPath: '/login',\n  AuthenticatingComponent: LoadingSpinner,\n  wrapperDisplayName: 'UserIsAuthenticated',\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: ({ firebase: { auth } }) =>\n    !auth.isEmpty && !!auth.uid,\n  authenticatingSelector: ({ firebase: { auth, isInitializing } }) =>\n    !auth.isLoaded || isInitializing,\n  redirectAction: newLoc => dispatch => {\n    // Use push, replace, and go to navigate around.\n    history.push(newLoc)\n    dispatch({\n      type: UNAUTHED_REDIRECT,\n      payload: { message: 'User is not authenticated.' }\n    })\n  }\n})\n\n/**\n * Higher Order Component that redirects to listings page or most\n * recent route instead rendering if user is not authenticated. This is useful\n * routes that should not be displayed if a user is logged in, such as the\n * login route.\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\nexport const UserIsNotAuthenticated = connectedRouterRedirect({\n  AuthenticatingComponent: LoadingSpinner,\n  wrapperDisplayName: 'UserIsNotAuthenticated',\n  allowRedirectBack: false,\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: ({ firebase: { auth } }) => auth.isEmpty,\n  authenticatingSelector: ({ firebase: { auth, isInitializing } }) =>\n    !auth.isLoaded || isInitializing,\n  redirectPath: (state, ownProps) => {\n    console.log('state');\n    console.log(state);\n    console.log('ownProps');\n    console.log(ownProps);\n\n    const { firebase: { auth: { email } } } = state;\n\n    if (email === 'admin@test.com') {\n      console.log('isAdmin');\n      return POST_PATH;\n    }\n\n    return locationHelper.getRedirectQueryParam(ownProps) || LIST_PATH;\n  },\n  redirectAction: newLoc => dispatch => {\n    // Use push, replace, and go to navigate around.\n    history.push(newLoc)\n    dispatch({\n      type: AUTHED_REDIRECT,\n      payload: { message: 'User is not authenticated.' }\n    })\n  }\n})\n"]},"metadata":{},"sourceType":"module"}