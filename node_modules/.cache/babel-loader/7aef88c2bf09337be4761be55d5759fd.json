{"ast":null,"code":"import { NOTIFICATION_SHOW, NOTIFICATION_DISMISS, NOTIFICATION_CLEAR } from './actionTypes';\nvar defaultDismissTime = 2500; // 2.5 seconds\n\n/**\n * Publish a notification. if `dismissAfter` is set, the notification will be\n * auto dismissed after the given period.\n * @param {Object} notif - Object containing\n * @param {Object} notif.kind - Kinda of notification (success, warning, failure)\n * @param {Object} notif.message - Notification message\n * @param {Object} notif.dismissAfter - Time after which to dismiss notification (default time set in constants)\n */\n\nexport function showNotification(notif) {\n  var payload = Object.assign({}, notif); // Set default id to now if none provided\n\n  if (!payload.id) {\n    payload.id = Date.now();\n  }\n\n  return function (dispatch) {\n    dispatch({\n      type: NOTIFICATION_SHOW,\n      payload: payload\n    });\n    setTimeout(function () {\n      dispatch({\n        type: NOTIFICATION_DISMISS,\n        payload: payload.id\n      });\n    }, payload.dismissAfter || defaultDismissTime);\n  };\n}\n/**\n * Show message for a success\n * @param {String} message - Message to show\n */\n\nexport function showSuccess(message) {\n  return showNotification({\n    type: 'success',\n    message: message\n  });\n}\n/**\n * Show message for a error\n * @param {String} message - Message to show\n */\n\nexport function showError(message) {\n  return showNotification({\n    type: 'error',\n    message: \"Error: \".concat(message || '')\n  });\n}\n/**\n * Dismiss a notification by the given id.\n * @param {Number} id - notification id\n */\n\nexport function dismissNotification(payload) {\n  return {\n    type: NOTIFICATION_DISMISS,\n    payload: payload\n  };\n}\n/**\n * Clear all notifications\n */\n\nexport function clearNotifications() {\n  return {\n    type: NOTIFICATION_CLEAR\n  };\n}","map":{"version":3,"sources":["/home/seungmin/face-web/src/modules/notification/actions.js"],"names":["NOTIFICATION_SHOW","NOTIFICATION_DISMISS","NOTIFICATION_CLEAR","defaultDismissTime","showNotification","notif","payload","Object","assign","id","Date","now","dispatch","type","setTimeout","dismissAfter","showSuccess","message","showError","dismissNotification","clearNotifications"],"mappings":"AAAA,SACEA,iBADF,EAEEC,oBAFF,EAGEC,kBAHF,QAIO,eAJP;AAMA,IAAMC,kBAAkB,GAAG,IAA3B,C,CAAgC;;AAEhC;;;;;;;;;AAQA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AACtC,MAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAlB,CAAhB,CADsC,CAEtC;;AACA,MAAI,CAACC,OAAO,CAACG,EAAb,EAAiB;AACfH,IAAAA,OAAO,CAACG,EAAR,GAAaC,IAAI,CAACC,GAAL,EAAb;AACD;;AACD,SAAO,UAAAC,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEb,iBAAR;AAA2BM,MAAAA,OAAO,EAAPA;AAA3B,KAAD,CAAR;AAEAQ,IAAAA,UAAU,CAAC,YAAM;AACfF,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEZ,oBADC;AAEPK,QAAAA,OAAO,EAAEA,OAAO,CAACG;AAFV,OAAD,CAAR;AAID,KALS,EAKPH,OAAO,CAACS,YAAR,IAAwBZ,kBALjB,CAAV;AAMD,GATD;AAUD;AAED;;;;;AAIA,OAAO,SAASa,WAAT,CAAqBC,OAArB,EAA8B;AACnC,SAAOb,gBAAgB,CAAC;AAAES,IAAAA,IAAI,EAAE,SAAR;AAAmBI,IAAAA,OAAO,EAAPA;AAAnB,GAAD,CAAvB;AACD;AAED;;;;;AAIA,OAAO,SAASC,SAAT,CAAmBD,OAAnB,EAA4B;AACjC,SAAOb,gBAAgB,CAAC;AAAES,IAAAA,IAAI,EAAE,OAAR;AAAiBI,IAAAA,OAAO,mBAAYA,OAAO,IAAI,EAAvB;AAAxB,GAAD,CAAvB;AACD;AAED;;;;;AAIA,OAAO,SAASE,mBAAT,CAA6Bb,OAA7B,EAAsC;AAC3C,SAAO;AACLO,IAAAA,IAAI,EAAEZ,oBADD;AAELK,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID;AAED;;;;AAGA,OAAO,SAASc,kBAAT,GAA8B;AACnC,SAAO;AAAEP,IAAAA,IAAI,EAAEX;AAAR,GAAP;AACD","sourcesContent":["import {\n  NOTIFICATION_SHOW,\n  NOTIFICATION_DISMISS,\n  NOTIFICATION_CLEAR\n} from './actionTypes'\n\nconst defaultDismissTime = 2500 // 2.5 seconds\n\n/**\n * Publish a notification. if `dismissAfter` is set, the notification will be\n * auto dismissed after the given period.\n * @param {Object} notif - Object containing\n * @param {Object} notif.kind - Kinda of notification (success, warning, failure)\n * @param {Object} notif.message - Notification message\n * @param {Object} notif.dismissAfter - Time after which to dismiss notification (default time set in constants)\n */\nexport function showNotification(notif) {\n  const payload = Object.assign({}, notif)\n  // Set default id to now if none provided\n  if (!payload.id) {\n    payload.id = Date.now()\n  }\n  return dispatch => {\n    dispatch({ type: NOTIFICATION_SHOW, payload })\n\n    setTimeout(() => {\n      dispatch({\n        type: NOTIFICATION_DISMISS,\n        payload: payload.id\n      })\n    }, payload.dismissAfter || defaultDismissTime)\n  }\n}\n\n/**\n * Show message for a success\n * @param {String} message - Message to show\n */\nexport function showSuccess(message) {\n  return showNotification({ type: 'success', message })\n}\n\n/**\n * Show message for a error\n * @param {String} message - Message to show\n */\nexport function showError(message) {\n  return showNotification({ type: 'error', message: `Error: ${message || ''}` })\n}\n\n/**\n * Dismiss a notification by the given id.\n * @param {Number} id - notification id\n */\nexport function dismissNotification(payload) {\n  return {\n    type: NOTIFICATION_DISMISS,\n    payload\n  }\n}\n\n/**\n * Clear all notifications\n */\nexport function clearNotifications() {\n  return { type: NOTIFICATION_CLEAR }\n}\n"]},"metadata":{},"sourceType":"module"}