{"ast":null,"code":"import _classCallCheck from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/seungmin/face-web/src/routes/User/Dashboard/components/DashboardPage/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Fragement } from 'react';\nimport styled from 'styled-components';\nimport { Upload, Icon, message } from 'antd';\nimport axios from 'axios';\nimport UploadGuide from '../UploadGuide';\nimport HistoryTable from '../HistoryTable';\nvar requestUrl = 'https://skb89qsem5.execute-api.ap-northeast-2.amazonaws.com/dev/test/image';\nvar dummyBase64 = \"\";\nvar dummyData = {\n  currentData: {\n    jaw: 9.688786560366793,\n    eye: 2.8912695962205643,\n    lips: 25.463345061871614\n  },\n  histories: [{\n    jaw: 9.588786560366793,\n    eye: 2.7912695962205643,\n    lips: 23.463345061871614\n  }, {\n    jaw: 9.888786560366793,\n    eye: 2.8732695962205643,\n    lips: 24.463345061871614\n  }]\n};\n\nfunction generateHistoryTableData(data) {\n  console.log(\"Data\");\n  console.log(data);\n  var initialData = Object.keys(data.currentData).length > 0 ? [_objectSpread({\n    key: 0\n  }, data.currentData)] : [];\n  return data.histories.reduce(function (acc, history, index) {\n    acc.push(_objectSpread({\n      key: index + 1\n    }, history));\n    return acc;\n  }, initialData);\n}\n\nfunction getBase64(img, callback) {\n  var reader = new FileReader();\n  reader.addEventListener('load', function () {\n    return callback(reader.result);\n  });\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  /*\n  const isJPG = file.type === 'image/jpeg';\n  if (!isJPG) {\n    message.error('You can only upload JPG file!');\n  }\n  */\n  var isLt2M = file.size / 1024 / 1024 < 2;\n\n  if (!isLt2M) {\n    message.error('Image must smaller than 2MB!');\n  }\n\n  return (\n    /* isJPG && */\n    isLt2M\n  );\n}\n\nvar Wrapper = styled.div(_templateObject());\n\nvar DashboardPage =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(DashboardPage, _React$PureComponent);\n\n  function DashboardPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DashboardPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DashboardPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      pristine: true,\n      loading: false,\n      error: false,\n      data: {\n        data: {\n          currentData: {},\n          histories: []\n        }\n      }\n    };\n\n    _this.uploadStart = function (base64) {\n      axios.post(requestUrl, {\n        data: \"\\\"\".concat(base64.split(',')[1], \"\\\"\")\n      }).then(function (response) {\n        _this.setState({\n          loading: false,\n          data: response.data\n        });\n      }).catch(function (error) {\n        _this.setState({\n          loading: false,\n          error: true,\n          data: dummyData\n        });\n\n        console.log(error);\n      });\n    };\n\n    _this.handleChange = function (info) {\n      if (info.file.status === 'uploading') {\n        _this.setState({\n          pristine: false,\n          loading: true,\n          error: false\n        });\n\n        return;\n      }\n\n      if (info.file.status === 'done') {\n        // Get this url from response in real world.\n        getBase64(info.file.originFileObj, function (base64) {\n          return _this.uploadStart(base64);\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DashboardPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          pristine = _this$state.pristine,\n          loading = _this$state.loading,\n          error = _this$state.error;\n      var dataSource = generateHistoryTableData(data.data);\n      return React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(UploadGuide, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(Upload, {\n        name: \"avatar\",\n        listType: \"picture-card\",\n        className: \"avatar-uploader\",\n        showUploadList: false,\n        action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: loading ? 'loading' : 'plus',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"ant-upload-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"\\uAC80\\uC0AC\\uD558\\uAE30\"))), React.createElement(HistoryTable, {\n        dataSource: dataSource,\n        loading: loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DashboardPage;\n}(React.PureComponent);\n\nexport { DashboardPage as default };","map":{"version":3,"sources":["/home/seungmin/face-web/src/routes/User/Dashboard/components/DashboardPage/index.js"],"names":["React","Fragement","styled","Upload","Icon","message","axios","UploadGuide","HistoryTable","requestUrl","dummyBase64","dummyData","currentData","jaw","eye","lips","histories","generateHistoryTableData","data","console","log","initialData","Object","keys","length","key","reduce","acc","history","index","push","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","beforeUpload","file","isLt2M","size","error","Wrapper","div","DashboardPage","state","pristine","loading","uploadStart","base64","post","split","then","response","setState","catch","handleChange","info","status","originFileObj","dataSource","PureComponent"],"mappings":"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","sourcesContent":["import React, { Fragement } from 'react';\nimport styled from 'styled-components';\nimport { Upload, Icon, message } from 'antd';\nimport axios from 'axios';\n\nimport UploadGuide from '../UploadGuide';\nimport HistoryTable from '../HistoryTable';\n\nconst requestUrl = 'https://skb89qsem5.execute-api.ap-northeast-2.amazonaws.com/dev/test/image';\nconst dummyBase64 = \"\";\n\nconst dummyData = {\n  currentData: {\n    jaw: 9.688786560366793,\n    eye: 2.8912695962205643,\n    lips: 25.463345061871614,\n  },\n  histories: [\n    {\n      jaw: 9.588786560366793,\n      eye: 2.7912695962205643,\n      lips: 23.463345061871614,\n    },\n    {\n      jaw: 9.888786560366793,\n      eye: 2.8732695962205643,\n      lips: 24.463345061871614,\n    },\n  ],\n};\n\nfunction generateHistoryTableData(data) {\n  console.log(\"Data\")\n  console.log(data)\n\n  const initialData = Object.keys(data.currentData).length > 0 ? [{ key: 0, ...data.currentData }] : [];\n\n  return data.histories.reduce((acc, history, index) => {\n    acc.push({\n      key: index + 1,\n      ...history,\n    });\n\n    return acc;\n  }, initialData);\n}\n\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  /*\n  const isJPG = file.type === 'image/jpeg';\n  if (!isJPG) {\n    message.error('You can only upload JPG file!');\n  }\n  */\n  const isLt2M = file.size / 1024 / 1024 < 2;\n  if (!isLt2M) {\n    message.error('Image must smaller than 2MB!');\n  }\n  return /* isJPG && */ isLt2M;\n}\n\nconst Wrapper = styled.div`\n`;\n\nexport default class DashboardPage extends React.PureComponent {\n  state = {\n    pristine: true,\n    loading: false,\n    error: false,\n    data: {\n      data : {\n        currentData: {},\n        histories: [],\n      },\n    },\n  };\n\n  uploadStart = base64 => {\n    axios.post(requestUrl, {data : `\"${base64.split(',')[1]}\"`})\n      .then(response => {\n        this.setState({\n          loading: false,\n          data: response.data,\n        });\n      })\n      .catch(error => {\n        this.setState({\n          loading: false,\n          error: true,\n          data: dummyData,\n        });\n        console.log(error);\n      });\n  }\n\n  handleChange = (info) => {\n    if (info.file.status === 'uploading') {\n      this.setState({ pristine: false, loading: true, error: false });\n      return;\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      getBase64(info.file.originFileObj, base64 => this.uploadStart(base64));\n    }\n  }\n\n  render() {\n    const {\n      data,\n      pristine,\n      loading,\n      error,\n    } = this.state;\n\n    const dataSource = generateHistoryTableData(data.data);\n\n    return (\n      <Wrapper>\n        <UploadGuide />\n        <Upload\n          name=\"avatar\"\n          listType=\"picture-card\"\n          className=\"avatar-uploader\"\n          showUploadList={false}\n          action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n          onChange={this.handleChange}\n        >\n          <div>\n            <Icon type={loading ? 'loading' : 'plus'} />\n            <div className=\"ant-upload-text\">검사하기</div>\n          </div>\n        </Upload>\n        <HistoryTable dataSource={dataSource} loading={loading} />\n      </Wrapper>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}