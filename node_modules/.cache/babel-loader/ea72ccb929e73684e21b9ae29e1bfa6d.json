{"ast":null,"code":"import _objectSpread from \"/home/seungmin/face-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/auth';\nimport 'firebase/storage';\nimport makeRootReducer from './reducers';\nimport { firebase as fbConfig, reduxFirebase as rrfConfig, env } from '../config';\nexport default (function () {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // ======================================================\n  // Redux + Firebase Config (react-redux-firebase & redux-firestore)\n  // ======================================================\n  var defaultRRFConfig = {\n    userProfile: 'users',\n    // root that user profiles are written to\n    updateProfileOnLogin: false,\n    // enable/disable updating of profile on login\n    presence: 'presence',\n    // list currently online users under \"presence\" path in RTDB\n    sessions: null,\n    // Skip storing of sessions\n    enableLogging: false // enable/disable Firebase Database Logging\n    // profileDecorator: (userData) => ({ email: userData.email }) // customize format of user profile\n    // Combine default config with overrides if they exist (set within .firebaserc)\n\n  };\n  var combinedConfig = rrfConfig ? _objectSpread({}, defaultRRFConfig, rrfConfig) : defaultRRFConfig; // ======================================================\n  // Store Enhancers\n  // ======================================================\n\n  var enhancers = [];\n\n  if (env === 'local') {\n    var devToolsExtension = window.devToolsExtension;\n\n    if (typeof devToolsExtension === 'function') {\n      enhancers.push(devToolsExtension());\n    }\n  } // ======================================================\n  // Middleware Configuration\n  // ======================================================\n\n\n  var middleware = [thunk.withExtraArgument(getFirebase) // This is where you add other middleware like redux-observable\n  ]; // ======================================================\n  // Firebase Initialization\n  // ======================================================\n\n  firebase.initializeApp(fbConfig); // ======================================================\n  // Store Instantiation and HMR Setup\n  // ======================================================\n\n  var store = createStore(makeRootReducer(), initialState, compose.apply(void 0, [applyMiddleware.apply(void 0, middleware), reactReduxFirebase(firebase, combinedConfig)].concat(enhancers)));\n  store.asyncReducers = {};\n\n  if (module.hot) {\n    module.hot.accept('./reducers', function () {\n      var reducers = require('./reducers').default;\n\n      store.replaceReducer(reducers(store.asyncReducers));\n    });\n  }\n\n  return store;\n});","map":{"version":3,"sources":["/home/seungmin/face-web/src/store/createStore.js"],"names":["applyMiddleware","compose","createStore","thunk","reactReduxFirebase","getFirebase","firebase","makeRootReducer","fbConfig","reduxFirebase","rrfConfig","env","initialState","defaultRRFConfig","userProfile","updateProfileOnLogin","presence","sessions","enableLogging","combinedConfig","enhancers","devToolsExtension","window","push","middleware","withExtraArgument","initializeApp","store","asyncReducers","module","hot","accept","reducers","require","default","replaceReducer"],"mappings":";AAAA,SAASA,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,kBAAT,EAA6BC,WAA7B,QAAgD,sBAAhD;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,mBAAP;AACA,OAAO,eAAP;AACA,OAAO,kBAAP;AACA,OAAOC,eAAP,MAA4B,YAA5B;AACA,SACED,QAAQ,IAAIE,QADd,EAEEC,aAAa,IAAIC,SAFnB,EAGEC,GAHF,QAIO,WAJP;AAMA,gBAAe,YAAuB;AAAA,MAAtBC,YAAsB,uEAAP,EAAO;AACpC;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG;AACvBC,IAAAA,WAAW,EAAE,OADU;AACD;AACtBC,IAAAA,oBAAoB,EAAE,KAFC;AAEM;AAC7BC,IAAAA,QAAQ,EAAE,UAHa;AAGD;AACtBC,IAAAA,QAAQ,EAAE,IAJa;AAIP;AAChBC,IAAAA,aAAa,EAAE,KALQ,CAKF;AACrB;AAGF;;AATyB,GAAzB;AAUA,MAAMC,cAAc,GAAGT,SAAS,qBACvBG,gBADuB,EACFH,SADE,IAE5BG,gBAFJ,CAdoC,CAkBpC;AACA;AACA;;AACA,MAAMO,SAAS,GAAG,EAAlB;;AAEA,MAAIT,GAAG,KAAK,OAAZ,EAAqB;AACnB,QAAMU,iBAAiB,GAAGC,MAAM,CAACD,iBAAjC;;AACA,QAAI,OAAOA,iBAAP,KAA6B,UAAjC,EAA6C;AAC3CD,MAAAA,SAAS,CAACG,IAAV,CAAeF,iBAAiB,EAAhC;AACD;AACF,GA5BmC,CA8BpC;AACA;AACA;;;AACA,MAAMG,UAAU,GAAG,CACjBrB,KAAK,CAACsB,iBAAN,CAAwBpB,WAAxB,CADiB,CAEjB;AAFiB,GAAnB,CAjCoC,CAsCpC;AACA;AACA;;AACAC,EAAAA,QAAQ,CAACoB,aAAT,CAAuBlB,QAAvB,EAzCoC,CA2CpC;AACA;AACA;;AACA,MAAMmB,KAAK,GAAGzB,WAAW,CACvBK,eAAe,EADQ,EAEvBK,YAFuB,EAGvBX,OAAO,MAAP,UACED,eAAe,MAAf,SAAmBwB,UAAnB,CADF,EAEEpB,kBAAkB,CAACE,QAAD,EAAWa,cAAX,CAFpB,SAGKC,SAHL,EAHuB,CAAzB;AAUAO,EAAAA,KAAK,CAACC,aAAN,GAAsB,EAAtB;;AAEA,MAAIC,MAAM,CAACC,GAAX,EAAgB;AACdD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,YAAlB,EAAgC,YAAM;AACpC,UAAMC,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,OAAvC;;AACAP,MAAAA,KAAK,CAACQ,cAAN,CAAqBH,QAAQ,CAACL,KAAK,CAACC,aAAP,CAA7B;AACD,KAHD;AAID;;AAED,SAAOD,KAAP;AACD,CAlED","sourcesContent":["import { applyMiddleware, compose, createStore } from 'redux'\nimport thunk from 'redux-thunk'\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase'\nimport firebase from 'firebase/app'\nimport 'firebase/database'\nimport 'firebase/auth'\nimport 'firebase/storage'\nimport makeRootReducer from './reducers'\nimport {\n  firebase as fbConfig,\n  reduxFirebase as rrfConfig,\n  env\n} from '../config'\n\nexport default (initialState = {}) => {\n  // ======================================================\n  // Redux + Firebase Config (react-redux-firebase & redux-firestore)\n  // ======================================================\n  const defaultRRFConfig = {\n    userProfile: 'users', // root that user profiles are written to\n    updateProfileOnLogin: false, // enable/disable updating of profile on login\n    presence: 'presence', // list currently online users under \"presence\" path in RTDB\n    sessions: null, // Skip storing of sessions\n    enableLogging: false // enable/disable Firebase Database Logging\n    // profileDecorator: (userData) => ({ email: userData.email }) // customize format of user profile\n  }\n\n  // Combine default config with overrides if they exist (set within .firebaserc)\n  const combinedConfig = rrfConfig\n    ? { ...defaultRRFConfig, ...rrfConfig }\n    : defaultRRFConfig\n\n  // ======================================================\n  // Store Enhancers\n  // ======================================================\n  const enhancers = []\n\n  if (env === 'local') {\n    const devToolsExtension = window.devToolsExtension\n    if (typeof devToolsExtension === 'function') {\n      enhancers.push(devToolsExtension())\n    }\n  }\n\n  // ======================================================\n  // Middleware Configuration\n  // ======================================================\n  const middleware = [\n    thunk.withExtraArgument(getFirebase)\n    // This is where you add other middleware like redux-observable\n  ]\n\n  // ======================================================\n  // Firebase Initialization\n  // ======================================================\n  firebase.initializeApp(fbConfig)\n\n  // ======================================================\n  // Store Instantiation and HMR Setup\n  // ======================================================\n  const store = createStore(\n    makeRootReducer(),\n    initialState,\n    compose(\n      applyMiddleware(...middleware),\n      reactReduxFirebase(firebase, combinedConfig),\n      ...enhancers\n    )\n  )\n\n  store.asyncReducers = {}\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      const reducers = require('./reducers').default\n      store.replaceReducer(reducers(store.asyncReducers))\n    })\n  }\n\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}